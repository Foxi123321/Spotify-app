name: Build Android APK

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master
  pull_request:

jobs:
  build-android-apk:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    env:
      JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Upgrade pip and install Buildozer (if using Kivy)
        run: |
          python -m pip install --upgrade pip
          pip install buildozer cython

      - name: Ensure universe repo and install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository universe
          sudo apt-get update
          sudo apt-get install -y \
            openjdk-17-jdk \
            unzip \
            python3-setuptools \
            python3-pip \
            python3-wheel \
            git \
            zip \
            ccache \
            libstdc++6 \
            zlib1g-dev
          sudo apt-get install -y libncurses5 || sudo apt-get install -y libncurses5-dev || true
          dpkg -l | grep ncurses

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept SDK licenses and install required components
        run: |
          yes | sdkmanager --licenses
          sdkmanager --install \
            "platform-tools" \
            "platforms;android-34" \
            "build-tools;34.0.0" \
            "cmdline-tools;latest"
          sdkmanager --list

      # This step ensures the directory exists in case Buildozer expects it
      - name: Ensure Buildozer directories exist
        run: mkdir -p .buildozer/android/platform/python-for-android

      - name: Clean previous builds
        run: buildozer android clean

      - name: Build APK with Buildozer
        run: buildozer android debug

      - name: Find built APK
        id: find_apk
        run: |
          APK_PATH=$(find . -name "*.apk" | grep -m 1 "/bin/" || true)
          echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug.apk
          path: ${{ steps.find_apk.outputs.apk_path }}

      - name: Post-job cleanup
        if: always()
        run: echo "Cleanup complete."
